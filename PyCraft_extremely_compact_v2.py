import pygame, numpy
init, surface, blocks, camdata, bpp, bt, bpt, pb, sind, cosd = (pygame.init(), pygame.display.set_mode((512, 512)), [[[[None, [255]*3][y == 30] for z in range(128)] for y in range(64)] for x in range(128)], [[64, 32, 64], [0, 0, 0]], [0, 0, 0], [(255, 255, 255), (0, 255, 0)], 1, False, lambda a: numpy.sin(a*numpy.pi/180), lambda a: numpy.cos(a*numpy.pi/180))
while True:
    camdata, bpp, (blocks[bpp[0]][bpp[1]][bpp[2]], pb) = ([[camdata[0][0]+sind(camdata[1][1])*(pygame.key.get_pressed()[pygame.K_w]-pygame.key.get_pressed()[pygame.K_s])*0.1, camdata[0][1], camdata[0][2]+cosd(camdata[1][1])*(pygame.key.get_pressed()[pygame.K_w]-pygame.key.get_pressed()[pygame.K_s])*0.1], [camdata[1][0]+(pygame.key.get_pressed()[pygame.K_UP]-pygame.key.get_pressed()[pygame.K_DOWN]), camdata[1][1]+(pygame.key.get_pressed()[pygame.K_RIGHT]-pygame.key.get_pressed()[pygame.K_LEFT])]], [bp for bp in [(int(camdata[0][0]+sind(camdata[1][1])*cosd(camdata[1][0])*0.1*d), int(camdata[0][1]+sind(camdata[1][0])*0.1*d), int(camdata[0][2]+cosd(camdata[1][1])*cosd(camdata[1][0])*0.1*d)) for d in range(100)] if blocks[bp[0]][bp[1]][bp[2]] == None][-1], [((255, 0, 0), False), (bt[bpt], True)][pygame.K_e in [e.key for e in pygame.event.get() if e.type == pygame.KEYDOWN]])
    fill, frame, flip, pump, blocks[bpp[0]][bpp[1]][bpp[2]] = (surface.fill((0, 0, 0)), [[[[(pygame.draw.polygon(surface, b[1], [b[0][0], b[0][6], b[0][7], b[0][1]], 1), pygame.draw.polygon(surface, b[1], [b[0][1], b[0][7], b[0][5], b[0][3]], 1), pygame.draw.polygon(surface, b[1], [b[0][3], b[0][5], b[0][4], b[0][2]], 1), pygame.draw.polygon(surface, b[1], [b[0][2], b[0][4], b[0][6], b[0][0]], 1)) for b in [([(int(256*(lp[0]/lp[2]+1)), int(256*(-lp[1]/lp[2]+1))) for lp in [(cosd(camdata[1][1])*(bp[0]-camdata[0][0]-0.5+c%2)-sind(camdata[1][1])*(bp[2]-camdata[0][2]+(c>1 and c<6)), cosd(camdata[1][0])*(bp[1]-camdata[0][1]-0.5+(c>3))-sind(camdata[1][0])*(cosd(camdata[1][1])*(bp[2]-camdata[0][2]+(c>1 and c<6))+sind(camdata[1][1])*(bp[0]-camdata[0][0]-0.5+c%2)), cosd(camdata[1][0])*(cosd(camdata[1][1])*(bp[2]-camdata[0][2]+(c>1 and c<6))+sind(camdata[1][1])*(bp[0]-camdata[0][0]-0.5+c%2))+sind(camdata[1][0])*(bp[1]-camdata[0][1]-0.5+(c>3))) for c in range(8)] if lp[2] > 0 and abs(lp[0]/lp[2]) < 1 and abs(lp[1]/lp[2]) < 1], blocks[bp[0]][bp[1]][bp[2]]) for bp in [(int(camdata[0][0]-dx+2*dx*(i%2)), int(camdata[0][1]-dy+2*dy*(i>3)), int(camdata[0][2]-dz+2*dz*(i>1 and i<6))) for i in range(8)] if blocks[bp[0]][bp[1]][bp[2]] != None] if len(b[0]) == 8] for dz in reversed(range(10))] for dy in reversed(range(10))] for dx in reversed(range(10))], pygame.display.flip(), pygame.event.pump(), [None, blocks[bpp[0]][bpp[1]][bpp[2]]][pb])
